package Programmers;

import java.util.*;
import java.util.stream.Collectors;

// TODO: 2023/09/05 프로그래머스(완전탐색, LV2) 87936번
public class pgm_전력망을둘로나누기LV2 {
    public static void main(String[] args) {
        Solution s = new Solution();
        int solution = s.solution(9,new int[][]{{1,3},{2,3},{3,4},{4,5},{4,6},{4,7},{7,8},{7,9}});
        int[] arr = new int[4];
        ArrayList<Integer> all = new ArrayList(Arrays.asList(arr));
    }
    static class Solution {
        static int arr[][];
        static boolean visit[];
        public int[][] arrayCopy(int[][] array){
            int[][] result = new int[array.length][array.length];
            for (int i = 0; i < array.length; i++) {
                for (int j = 0; j < array[i].length; j++) {
                    result[i][j] = array[i][j];
                }
            }
            return result;
        }
        public int solution(int n, int[][] wires) {
            int answer = Integer.MAX_VALUE;
            arr = new int[n+1][n+1];
            //초기화 해서 초기 배열 선언
            for (int i = 0; i < wires.length; i++) {
                int low = wires[i][0];
                int column = wires[i][1];
                arr[low][column] = 1;
                arr[column][low] = 1;
            }
            //모든 경우의수 따지기 위해서 해당부분 제거한 배열을 넣음
            for (int i = 0; i < wires.length; i++) {
                Arrays.fill(visit, false);
                int[][] tarr = arrayCopy(arr);
                int low = wires[i][0];
                int column = wires[i][1];
                tarr[low][column] = 0;
                tarr[column][low] = 0;
                int bfs1 = bfs(tarr, low);
                int bfs2 = bfs(tarr, column);
                answer = Math.min(answer, Math.abs(bfs1-bfs2));
            }
            return answer;
        }

        static int bfs(int [][] tarr,int start){
            Queue<Integer> q = new LinkedList<>();
            q.add(start);
            visit[start] = true;
            int res = 0;
            while (!q.isEmpty()) {
                int v = q.poll();
                res++;
                for (int i = 1; i < tarr[v].length; i++) {
                    if (tarr[v][i] == 1 && !visit[i]) {
                        q.offer(i);
                        visit[i] = true;
                    }
                }
            }
            return res;
        }
    }
}


--------------------

package Programmers;

// TODO: 2023/09/05 프로그래머스(완전탐색, LV2) 87936번
public class pgm_피로도LV2 {
    public static void main(String[] args) {
        Solution s = new Solution();
        int solution = s.solution(80,new int[][]{{80,20},{50,40},{30,10}});

    }
    static class Solution {
        static boolean visit[];
        static int arr[][];
        int answer = -1;
        public int solution(int k, int[][] dungeons) {
            arr = dungeons;
            visit = new boolean[arr.length];
            dp(k, 0, 0);
            System.out.println(answer);
            return answer;
        }
        public void dp(int tk,int t_answer,int l){
            if (l == arr.length) {
                answer = Math.max(answer, t_answer);
                return;
            }
            for (int i = 0; i < arr.length; i++) {
                if(!visit[i]){
                    visit[i] = true;
                    if(arr[i][0]<=tk){
                        //소모 피로도를 뺌
                        dp(tk-arr[i][1],t_answer +1,l+1);
                    }else{
                        dp(tk,t_answer,l+1);
                    }
                    visit[i] =false;
                }
            }
        }
    }
}

